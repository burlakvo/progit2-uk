[[_getting_a_repo]]
=== Створення Git-репозиторія

Зазвичай Git репозиторій отримують одним з двох способів:

1. Беруть локальну директорію, що наразі не під контролем версій, та перетворюють її на сховище Git, або
2. Звідкілясь _клонують_ існуючий Git репозиторій.

У будь-якому разі ви отримуєте на локальній машині готове до роботи Git сховище.

==== Ініціалізація репозиторія в існуючому каталозі

Якщо у вас вже є тека з проектом, що наразі не перебуває під контролем версії, і ви бажаєте почати використовувати з цим проектом Git, спочатку треба перейти до теки цього проекту.
Якщо ви ніколи ще цього не робили, команда може трохи відрізнятися в залежності від вашої системи:

для Linux:
[source,console]
----
$ cd /home/user/my_project
----
<<<<<<< book/02-git-basics/sections/getting-a-repository.asc-ukr
для Mac:
||||||| book/02-git-basics/sections/getting-a-repository.asc-old-eng
for Mac:
=======
for macOS:
>>>>>>> book/02-git-basics/sections/getting-a-repository.asc-cur-eng
[source,console]
----
$ cd /Users/user/my_project
----
для Windows:
[source,console]
----
$ cd C:/Users/user/my_project
----

та виконати:

[source,console]
----
$ git init
----

<<<<<<< book/02-git-basics/sections/getting-a-repository.asc-ukr
Це створить новий підкаталог `.git`, який містить всі необхідні файли вашого репозиторія -- скелет Git-репозиторія.
На цей момент, у вашому проекті ще нічого не відстежується.
(Див <<ch10-git-internals#ch10-git-internals>> для отримання додаткової інформації про файли, що містяться в каталозі `.git`, котрий ви щойно створили.)(((git commands, init)))
||||||| book/02-git-basics/sections/getting-a-repository.asc-old-eng
This creates a new subdirectory named `.git` that contains all of your necessary repository files -- a Git repository skeleton.
At this point, nothing in your project is tracked yet.
(See <<ch10-git-internals#ch10-git-internals>> for more information about exactly what files are contained in the `.git` directory you just created.)(((git commands, init)))
=======
This creates a new subdirectory named `.git` that contains all of your necessary repository files -- a Git repository skeleton.
At this point, nothing in your project is tracked yet.
See <<ch10-git-internals#ch10-git-internals>> for more information about exactly what files are contained in the `.git` directory you just created.(((git commands, init)))
>>>>>>> book/02-git-basics/sections/getting-a-repository.asc-cur-eng

Якщо ви бажаєте додати існуючі файли під версійний контроль (на відміну від порожнього каталогу), ймовірно, вам слід проіндексувати ці файли і зробити перший коміт.
Ви можете це зробити за допомогою декількох команд `git add`, що визначають файли, за якими ви бажаєте слідкувати, після яких треба виконати `git commit`:

[source,console]
----
$ git add *.c
$ git add LICENSE
<<<<<<< book/02-git-basics/sections/getting-a-repository.asc-ukr
$ git commit -m 'Перша версія проекту'
||||||| book/02-git-basics/sections/getting-a-repository.asc-old-eng
$ git commit -m 'initial project version'
=======
$ git commit -m 'Initial project version'
>>>>>>> book/02-git-basics/sections/getting-a-repository.asc-cur-eng
----

Ми розповімо що саме роблять ці команди за хвильку.
Наразі, у вас є Git репозиторій з декількома файлами та першим комітом.

[[_git_cloning]]
==== Клонування існуючого репозиторія

<<<<<<< book/02-git-basics/sections/getting-a-repository.asc-ukr
Якщо ви бажаєте отримати копію існуючого Git репозиторія -- наприклад, проекту, в якому ви хочете прийняти участь -- вам потрібна команда `git clone`.
Якщо ви знайомі з іншими СКВ, наприклад Subversion, ви помітите, що команда називається "clone" (клонувати), а не "checkout" (перевірити).
Це важлива відмінність -- замість отримання просто робочої копії, Git отримує повну копію майже всіх даних, що є у сервера.
Кожна версія кожного файлу в історії проекту витягується автоматично, коли ви виконуєте `git clone`.
Насправді, якщо щось станеться з диском вашого серверу, ви зазвичай можете використати майже будь-який з клонів на будь-якому клієнті щоб повернути сервер до стану на момент клонування (ви можете втратити деякі серверні хуки (hook), проте усі дані під контролем версій повернуться – дивіться <<ch04-git-on-the-server#_getting_git_on_a_server>> задля детальнішої інформації).
||||||| book/02-git-basics/sections/getting-a-repository.asc-old-eng
If you want to get a copy of an existing Git repository -- for example, a project you'd like to contribute to -- the command you need is `git clone`.
If you're familiar with other VCS systems such as Subversion, you'll notice that the command is "clone" and not "checkout".
This is an important distinction -- instead of getting just a working copy, Git receives a full copy of nearly all data that the server has.
Every version of every file for the history of the project is pulled down by default when you run `git clone`.
In fact, if your server disk gets corrupted, you can often use nearly any of the clones on any client to set the server back to the state it was in when it was cloned (you may lose some server-side hooks and such, but all the versioned data would be there -- see <<ch04-git-on-the-server#_getting_git_on_a_server>> for more details).
=======
If you want to get a copy of an existing Git repository -- for example, a project you'd like to contribute to -- the command you need is `git clone`.
If you're familiar with other VCSs such as Subversion, you'll notice that the command is "clone" and not "checkout".
This is an important distinction -- instead of getting just a working copy, Git receives a full copy of nearly all data that the server has.
Every version of every file for the history of the project is pulled down by default when you run `git clone`.
In fact, if your server disk gets corrupted, you can often use nearly any of the clones on any client to set the server back to the state it was in when it was cloned (you may lose some server-side hooks and such, but all the versioned data would be there -- see <<ch04-git-on-the-server#_getting_git_on_a_server>> for more details).
>>>>>>> book/02-git-basics/sections/getting-a-repository.asc-cur-eng

Щоб клонувати репозиторій треба використати команду `git clone <url>`.(((git commands, clone)))
Наприклад, якщо ви бажаєте зробити клон бібліотеки Git `libgit2`, ви можете це зробити так:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

Це створить директорію під назвою `libgit2`, проведе ініціалізацію директорії `.git`, забере всі дані для репозиторія, та приведе директорію до стану останньої версії.
Якщо ви зайдете до щойно створеної директорії `libgit2`, ви побачите, що всі файли проекту на місці, готові для використання.

<<<<<<< book/02-git-basics/sections/getting-a-repository.asc-ukr
Якщо ви бажаєте зробити клон репозиторія в директорію з іншою назвою, ви можете передати її як другий параметр команди:
||||||| book/02-git-basics/sections/getting-a-repository.asc-old-eng
If you want to clone the repository into a directory named something other than `libgit2`, you can specify that as the next command-line option:
=======
If you want to clone the repository into a directory named something other than `libgit2`, you can specify the new directory name as an additional argument:
>>>>>>> book/02-git-basics/sections/getting-a-repository.asc-cur-eng

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

Ця команда робить те саме, що й попередня, тільки цільова директорія називається `mylibgit`.

Git має декілька різних протоколів передачі даних, які ви можете використовувати.
Попередній приклад використовує протокол `https://`, проте ви також можете побачити `git://` або `user@server:шлях/до/репозиторія.git`, що використовує SSH протокол.
<<ch04-git-on-the-server#_getting_git_on_a_server>> познайомить вас з усіма можливими варіантами доступу до Git репозиторія, які може мати сервер, та "за" та "проти" кожного.
