[[_git_tfs]]
==== TFS

(((TFS)))(((Importing, from TFS)))
Якщо ваша команда переходить від керування кодом за допомогою TFVC до Git, то ви забажаєте конвертацію найвищої якості з тих, які вам доступні.
Це означає, що хоча ми розглянули й git-tfs і git-tf у секції взаємодії, тут ми розглянемо лише git-tfs, оскільки він підтримує гілки, та здійснити це за допомогою git-tf неприйнятно складно.

[NOTE]
====
Це однобічна конвертація.
Отримане сховище Git не буде в змозі взаємодіяти з оригінальним проектом TFVC.
====

Спершу треба встановити відображення імен користувачів.
TFVC доволі ліберальний щодо того, що може бути в полі автора для набору змін, проте Git бажає читабельне ім’я та поштову адресу.
Ви можете отримати цю інформацію з консольного клієнта `tf` ось так:

[source,powershell]
----
PS> tf history $/myproject -recursive > AUTHORS_TMP
----

Ця команда отримує всі набори змін в історії проекту та кладе їх у файл AUTHORS_TMP, з якого ми отримаємо дані зі стовпчика 'User' (другого).
Відкрийте файл та з’ясуйте з якого символу починається та на якому закінчується стовпчик, та замініть у наступній команді параметри `11-20` команди `cut` своїми значеннями:

[source,powershell]
----
PS> cat AUTHORS_TMP | cut -b 11-20 | tail -n+3 | sort | uniq > AUTHORS
----

Команда `cut` залишає лише символи між 11 та 20 кожного рядка.
Команда `tail` ігнорує перші два рядки, що є заголовками та лінією ASCII-арт.
Результат пропускається через `sort` і `uniq`, щоб позбутися дублікатів, та зберігається у файлі `AUTHORS`.
Далі треба попрацювати вручну; щоб git-tfs зміг ефективно використати цей файл, кожен рядок має бути у форматі:

[source,text]
----
DOMAIN\username = User Name <email@address.com>
----

Частина ліворуч -- це поле ``User'' з TFVC, а частина праворуч від знаку дорівнює -- це ім’я користувача, яке використовуватиметься для комітів Git.

Щойно у вас є такий файл, можна робити повний клон проекту TFVC, який вам потрібен:

[source,powershell]
----
PS> git tfs clone --with-branches --authors=AUTHORS https://username.visualstudio.com/DefaultCollection $/project/Trunk project_git
----

Далі ви забажаєте прибрати секції `git-tfs-id` наприкінці повідомлень комітів.
Це зробить наступна команда:

[source,powershell]
----
PS> git filter-branch -f --msg-filter 'sed "s/^git-tfs-id:.*$//g"' '--' --all
----

Вона використовує команду `sed` з середовища Git-bash, щоб замінити будь-який рядок, що починається з ``git-tfs-id:'', порожнечею, яку потім проігнорує Git.

Коли все це зроблено, ви готові додати нове віддалене сховище, надіслати туди всі свої гілки, та команда може розпочати роботу з Git.
